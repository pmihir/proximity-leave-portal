import React, { useEffect, useRef } from "react";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import TextField from "@mui/material/TextField";
import MenuItem from "@mui/material/MenuItem";
import DateRangePicker from "@mui/lab/DateRangePicker";
import AdapterDateFns from "@mui/lab/AdapterDateFns";
import LocalizationProvider from "@mui/lab/LocalizationProvider";
import { useState } from "react";
import DatePicker from "@mui/lab/DatePicker";
import Button from "@mui/material/Button";
import InputLabel from "@mui/material/InputLabel";
import FormControl from "@mui/material/FormControl";
import Select from "@mui/material/Select";
import { useRouter } from "next/router";
import { signOut, useSession } from "next-auth/client";
import { Notify } from "../services/notification-manager";

const DEPARTMENTS = [
  {
    value: "ENG",
    label: "Engineering",
  },
  {
    value: "DES",
    label: "Design",
  },
  {
    value: "ADM",
    label: "Admin",
  },
];

export default function ApplyLeave() {
  const [formData, setFormData] = useState({
    name: {
      val: "",
      error: "",
    },
    department: {
      val: "",
      error: "",
    },
    fromDate: {
      val: "",
      error: "",
    },
    toDate: {
      val: "",
      error: "",
    },
    reason: {
      val: "",
      error: "",
    },
  });
  const [session] = useSession();
  const router = useRouter();
  const tokenRef = useRef(null);

  useEffect(() => {
    if (session === null) {
      router.replace("/");
    }
  }, [session, router]);

  useEffect(() => {
    tokenRef.current = JSON.parse(window.localStorage.getItem("timelyToken"));
  }, []);

  const [notificationStatus, setNotificationStatus] = useState({
    slack: false,
    timely: false,
    email: false,
  });

  const submitHandler = (e) => {
    e.preventDefault();

    //info will come from session// we will get this from login page

    const userName = session.user.name
      ? session.user.name
      : (function () {
          throw new Error("user not authenticated");
        })();
    const userEmail = session.user.email
      ? session.user.email
      : (function () {
          throw new Error("user not authenticated");
        })();

    const data = {
      name: formData.name.val,
      department: formData.department.val,
      fromDate: formData.fromDate.val,
      toDate: formData.toDate.val,
      reason: formData.reason.val,
    };
    console.log(data);

    Notify(
      userName,
      userEmail,
      data.fromDate,
      data.toDate,
      data.department,
      data.reason,
      tokenRef.current
    ).then((res) => {
      debugger;
      console.log(res);
      setNotificationStatus({ ...res });
    });
  };

  const onFormChangeHandler = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: { val: value, err: "" } });
  };

  const fromDateChangeHandler = (e) => {
    setFormData({ ...formData, fromDate: { val: e, err: "" } });
  };

  const toDateChangeHandler = (e) => {
    setFormData({ ...formData, toDate: { val: e, err: "" } });
  };

  const onLogout = () => {
    signOut();
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Leave Portal</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header className={styles.header}>
        <div>
          <Button variant="contained" onClick={onLogout}>
            Logout
          </Button>
        </div>
      </header>
      <main className={styles.main}>
        <h1>Proximity Works Leave Application</h1>
        <div className={styles.wrapper}>
          <form className={styles.form} onSubmit={submitHandler}>
            <div className={styles.formInput}>
              <TextField
                id="standard-basic"
                label="Name"
                name="name"
                required
                variant="standard"
                value={formData.name.val}
                onChange={(e) => onFormChangeHandler(e)}
              />
            </div>
            <div className={styles.formInput}>
              <FormControl variant="standard" sx={{ m: 1, minWidth: 120 }}>
                <InputLabel id="demo-simple-select-standard-label" required>
                  Department
                </InputLabel>
                <Select
                  labelId="demo-simple-select-standard-label"
                  id="demo-simple-select-standard"
                  value={formData.department.val}
                  onChange={(e) => onFormChangeHandler(e)}
                  label="Department"
                  required
                  name="department"
                >
                  {DEPARTMENTS.map((option) => (
                    <MenuItem key={option.value} value={option.value}>
                      {option.label}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </div>
            <div className={styles.formDates}>
              <div className={styles.formInput}>
                <LocalizationProvider dateAdapter={AdapterDateFns}>
                  <DatePicker
                    label="From Date"
                    value={formData.fromDate.val}
                    onChange={(e) => fromDateChangeHandler(e)}
                    name="fromDate"
                    required
                    renderInput={(params) => <TextField {...params} />}
                  />
                </LocalizationProvider>
              </div>
              <div className={styles.formInput}>
                <LocalizationProvider dateAdapter={AdapterDateFns}>
                  <DatePicker
                    label="To Date"
                    value={formData.toDate.val}
                    onChange={(e) => toDateChangeHandler(e)}
                    name="toDate"
                    required
                    renderInput={(params) => <TextField {...params} />}
                  />
                </LocalizationProvider>
              </div>
            </div>
            <div className={styles.formInput}>
              <TextField
                id="standard-textarea"
                label="Reason"
                placeholder="Ex. Fever, Personal Work"
                multiline
                variant="standard"
                value={formData.reason.val}
                required
                name="reason"
                onChange={(e) => onFormChangeHandler(e)}
              />
            </div>
            <div>
              <Button variant="contained" type="submit">
                Send Request
              </Button>
            </div>
          </form>
        </div>
      </main>
    </div>
  );
}
